coord_cartesian(xlim = c(0, 2))
pred_wiener %>% group_by(obs, targ, type, nD, emp_pre) %>%
summarise(median_rt = median(rt), .groups = "drop") %>%
pivot_wider(names_from = "emp_pre", values_from = "median_rt") %>%
mutate(abserr = abs(empirical - prediction)) -> dabserrt
pred_wiener %>% group_by(obs, targ, type, nD, emp_pre) %>%
summarise(median_rt = median(rt), .groups = "drop") %>%
pivot_wider(names_from = "emp_pre", values_from = "median_rt") %>%
ggplot(aes(x = prediction, y = empirical, colour = type)) +
geom_abline(linetype = 2) +
geom_point(alpha = 0.5) +
coord_fixed() +
scale_colour_manual(values = c("#228833", "#EE6677")) +
facet_wrap(~targ) +
theme(legend.position = "none") +
ggtitle(paste("mean absoute error = ", round(mean(dabserrt$abserr),3), " seconds", sep="")) -> plt_rt
pred_wiener %>% group_by(obs, targ, type, nD, emp_pre) %>%
summarise(accuracy = mean(accuracy), .groups = "drop") %>%
pivot_wider(names_from = "emp_pre", values_from = "accuracy") %>%
mutate(abserr = abs(empirical - prediction)) -> dabserr
pred_wiener %>% group_by(obs, targ, type, nD, emp_pre) %>%
summarise(accuracy = mean(accuracy), .groups = "drop") %>%
pivot_wider(names_from = "emp_pre", values_from = "accuracy") %>%
ggplot(aes(x = prediction, y = empirical, colour = type)) +
geom_abline(linetype = 2) +
scale_colour_manual(values = c("#228833", "#EE6677")) +
facet_wrap(~targ) +
coord_fixed(xlim = c(0.5, 1), ylim = c(0.5, 1)) +
geom_jitter(alpha = 0.25, height = 0.01)  +
theme(legend.position = "none") +
ggtitle(paste("mean absoute error = ", round(100*mean(dabserr$abserr),1), "%", sep="")) -> plt_acc
summary(dabserr$abserr)
rm(dabserr, dabserrt)
plt_acc / plt_rt
ggsave("../manuscript/figs/exp_lvl_3_pred.pdf", height = 6, width = 5)
m %>% gather_draws(`cor.*`, regex = TRUE) %>%
rename(var = ".variable") %>%
mutate(var = str_remove(var, "cor_observer__")) -> cor_post
cor_post %>% group_by(var) %>%
summarise(p_not_zero = max(mean(.value > 0), mean(.value < 0))) %>%
mutate(p_not_zero = cut(p_not_zero, c(0.5, 0.9, 0.95, 0.99, 1))) %>%
full_join(cor_post, by = "var") %>%
select(-.chain, -.iteration , -.draw) -> cp
plt_rate_fx <- plot_model_params(m, "drift rate")
plt_rate_rn <- plt_cors(cp, "drift rate")
plt_bs_fx <- plot_model_params(m, "bs")
plt_bs_rn <- plt_cors(cp, "bs")
plt_bias_fx <- plot_model_params(m, "bias")
plt_bias_rn <- plt_cors(cp, "bias")
(plt_rate_fx + plt_bs_fx + plt_bias_fx) / (plt_rate_rn + plt_bs_rn + plt_bias_rn )  + plot_layout(guides = "collect")  & theme(legend.position = "none")
ggsave("../manuscript/figs/exp_lvl_3_model_params.pdf", width = 10, height = 5)
cp_bs <- get_cor_data(cp, "bs")
cp_dr <- get_cor_data(cp, "drift rate")
cp_bias <- get_cor_data(cp, "bias")
cp_bias
bind_rows(cp_dr, cp_bs, cp_bias)
bind_rows(cp_dr, cp_bs, cp_bias) %>%
group_by(param) %>%
median_hdci(.value)
bind_rows(cp_dr, cp_bs, cp_bias) %>%
group_by(param, slope) %>%
median_hdci(.value)
cp_dr
cp_bs
get_cor_data <- function(cp, param_to_plot) {
if (param_to_plot == "drift rate") {
cp %>% filter(!str_detect(var, "(_bs_|_bias_|_ndt_)"), str_detect(var, ":nD.+:nD")) %>%
separate(var,
into = c("cor", "obs", "targ1", "paradigm1", NA, "targ2", "paradigm2", NA)) %>%
filter(targ1 == targ2) %>%
mutate(target =  str_remove_all(targ1, "targ"),
paradigm1 = paste0(paradigm1, ":nD"),
paradigm2 = paste0(paradigm1, ":nD")) -> cp_slopes
cp %>% filter(!str_detect(var, "(_bs_|_bias_|_ndt_)"), !str_detect(var, ":nD")) %>%
separate(var,
into = c("cor", "obs", "targ1", "paradigm1", "targ2", "paradigm2")) %>%
filter(targ1 == targ2) %>%
mutate(target =  str_remove_all(targ1, "targ")) -> cp_intercepts
cp <- bind_rows(cp_slopes, cp_intercepts) %>%
mutate(param = "drift rate")
rm(cp_slopes, cp_intercepts)
} else{
str_to_match <- paste0("_", param_to_plot, ".*_", param_to_plot)
cp %>% filter(str_detect(var, str_to_match )) %>%
separate(var,
into = c("cor", "obs", "param", "paradigm1",  NA,  "paradigm2"),
sep = "_+") -> cp
rm(str_to_match)
}
cp %>% filter(paradigm1 != paradigm2) %>%
mutate(comparison = paste(paradigm1, paradigm2)) %>%
mutate(comparison = str_remove_all(comparison, "type")) %>%
mutate(slope1 = str_detect(paradigm1, ":nD"),
slope2 = str_detect(paradigm2, ":nD"),
comparison = str_remove_all(comparison, ":nD")) %>%
filter(slope1 == slope2) %>%
mutate(slope = slope1,
slope = if_else(slope, "slope", "intercept")) %>%
select(-slope1, -slope2) -> cp
return(cp)
}
cp_bs <- get_cor_data(cp, "bs")
cp_dr <- get_cor_data(cp, "drift rate")
cp_bias <- get_cor_data(cp, "bias")
bind_rows(cp_dr, cp_bs, cp_bias) %>%
group_by(param, slope) %>%
median_hdci(.value)
bind_rows(cp_dr, cp_bs, cp_bias) %>%
unite(param, param, slope) %>%
group_by(param) %>%
median_hdci(.value)
cp_dr
bind_rows(cp_dr, cp_bs, cp_bias) %>%
unite(param, param, slope, targ1) %>%
group_by(param) %>%
median_hdci(.value)
bind_rows(cp_dr, cp_bs, cp_bias) %>%
group_by( param, slope, targ1) %>%
median_hdci(.value)
install.packages("kbextra")
install.packages("kbExtra")
library(tidyverse)
library(ggthemes)
library(brms)
library(tidybayes)
library(corrr)
library(patchwork)
options(digits = 2, mc.cores = 10)
knitr::opts_chunk$set(echo = TRUE)
theme_set(theme_bw())
source("plot_ddm_model.R")
d <- read_csv("../data_collected_by_level_3/Rt_accuracy_extracted.txt") %>%
select(-age, -sex, -n) %>%
select(obs = "observer", type = "targetType", targ = "targetPres", nD = "numDist", rt, accuracy) %>%
mutate(targ = as_factor(targ),
targ = fct_recode(targ, absent = "0", present = "1"))
d %>% group_by(obs,  targ) %>%
summarise(accuracy = mean(accuracy)) %>%
filter(accuracy < 0.75) -> to_remove
to_remove
d <- filter(d, !(obs %in% unique(to_remove$obs)))
min_rt = 0.200
max_rt = 10.00
ggplot(d, aes(x = rt)) + geom_histogram(bins = 100) +
geom_vline(xintercept = c(min_rt, max_rt), linetype = 2) +
scale_x_log10() +
coord_cartesian(xlim = c(0.1, 10)) +
ggtitle("all RTs")
d %>%
summarise(percent_below = 100*mean(rt<min_rt),
percent_above = 100*mean(rt>max_rt),
percent_removed = percent_below + percent_above) %>%
knitr::kable()
d <- filter(d, rt>min_rt, rt<max_rt)
d$response <- NA
d$response[which(d$targ=="present" & d$accuracy==1)] = 1
d$response[which(d$targ=="present" & d$accuracy==0)] = 0
d$response[which(d$targ=="absent" & d$accuracy==1)] = 0
d$response[which(d$targ=="absent" & d$accuracy==0)] = 1
write_csv(d, "../cluster_level3/data_for_model.csv")
d %>% group_by(obs, type, targ, nD) %>%
summarise(accuracy = mean(accuracy)) %>%
ggplot(aes(x = as.factor(nD), y = accuracy, fill = type)) +
geom_boxplot(alpha = 0.5) +
facet_wrap(~targ) +
scale_fill_manual(values = c("#228833", "#EE6677")) +
scale_x_discrete("number of distracters") +
theme(legend.position = "bottom") -> plt_acc
d %>% group_by(obs, type, targ, nD) %>%
summarise(accuracy = mean(accuracy)) %>%
filter(targ == "present", nD == 15) %>%
pivot_wider(values_from = "accuracy", names_from = "type") -> d2
ggplot(d2, aes(x = greenVertical, y = redHorizontal)) +
geom_jitter(alpha = 0.5, width = 0.005, height = 0.005) +
geom_abline(linetype = 2) +
coord_fixed(xlim = c(0.7, 1), ylim = c(0.7, 1)) +
scale_x_continuous("green vertical") +
scale_y_continuous("red  vertical") -> plt_acc2
plt_acc + plt_acc2 + plot_layout(widths = c(2, 1))
cor.test(d2$greenVertical, d2$redHorizontal)
0.36^2
d %>% filter(accuracy == 1) %>%
group_by(obs, type, targ, nD) %>%
summarise(median_rt = median(rt)) -> drt
drt
d2
d %>% group_by(obs, type, targ, nD) %>%
summarise(rt = median(rt)) %>%
filter(targ == "present", nD == 15) %>%
pivot_wider(values_from = "accuracy", names_from = "type") -> d2
d %>% group_by(obs, type, targ, nD) %>%
summarise(rt = median(rt))
d %>% group_by(obs, type, targ, nD) %>%
summarise(rt = median(rt)) %>%
filter(targ == "present", nD == 15) %>%
pivot_wider(values_from = "rt", names_from = "type") -> d2
cor.test(d2$greenVertical, d2$redHorizontal)
d %>% group_by(obs, type, targ) %>%
summarise(rt = median(rt)) %>%
filter(targ == "present") %>%
pivot_wider(values_from = "rt", names_from = "type") -> d2
cor.test(d2$greenVertical, d2$redHorizontal)
d2
d %>% group_by(obs, type, targ) %>%
summarise(rt = median(rt)) %>%
filter(targ == "absent") %>%
pivot_wider(values_from = "rt", names_from = "type") -> d2
d2
cor.test(d2$greenVertical, d2$redHorizontal)
library(tidyverse)
library(ggthemes)
library(brms)
library(tidybayes)
library(corrr)
library(patchwork)
options(digits = 2, mc.cores = 10)
knitr::opts_chunk$set(echo = TRUE)
theme_set(theme_bw())
source("plot_ddm_model.R")
d <- read_csv("../data_collected_by_level_3/Rt_accuracy_extracted.txt") %>%
select(-age, -sex, -n) %>%
select(obs = "observer", type = "targetType", targ = "targetPres", nD = "numDist", rt, accuracy) %>%
mutate(targ = as_factor(targ),
targ = fct_recode(targ, absent = "0", present = "1"))
d %>% group_by(obs,  targ) %>%
summarise(accuracy = mean(accuracy)) %>%
filter(accuracy < 0.75) -> to_remove
to_remove
d <- filter(d, !(obs %in% unique(to_remove$obs)))
min_rt = 0.200
max_rt = 10.00
ggplot(d, aes(x = rt)) + geom_histogram(bins = 100) +
geom_vline(xintercept = c(min_rt, max_rt), linetype = 2) +
scale_x_log10() +
coord_cartesian(xlim = c(0.1, 10)) +
ggtitle("all RTs")
d %>%
summarise(percent_below = 100*mean(rt<min_rt),
percent_above = 100*mean(rt>max_rt),
percent_removed = percent_below + percent_above) %>%
knitr::kable()
d <- filter(d, rt>min_rt, rt<max_rt)
d$response <- NA
d$response[which(d$targ=="present" & d$accuracy==1)] = 1
d$response[which(d$targ=="present" & d$accuracy==0)] = 0
d$response[which(d$targ=="absent" & d$accuracy==1)] = 0
d$response[which(d$targ=="absent" & d$accuracy==0)] = 1
write_csv(d, "../cluster_level3/data_for_model.csv")
d %>% group_by(obs, type, targ, nD) %>%
summarise(accuracy = mean(accuracy)) %>%
ggplot(aes(x = as.factor(nD), y = accuracy, fill = type)) +
geom_boxplot(alpha = 0.5) +
facet_wrap(~targ) +
scale_fill_manual(values = c("#228833", "#EE6677")) +
scale_x_discrete("number of distracters") +
theme(legend.position = "bottom") -> plt_acc
d %>% group_by(obs, type, targ, nD) %>%
summarise(accuracy = mean(accuracy)) %>%
filter(targ == "present", nD == 15) %>%
pivot_wider(values_from = "accuracy", names_from = "type") -> d2
ggplot(d2, aes(x = greenVertical, y = redHorizontal)) +
geom_jitter(alpha = 0.5, width = 0.005, height = 0.005) +
geom_abline(linetype = 2) +
coord_fixed(xlim = c(0.7, 1), ylim = c(0.7, 1)) +
scale_x_continuous("green vertical") +
scale_y_continuous("red  vertical") -> plt_acc2
plt_acc + plt_acc2 + plot_layout(widths = c(2, 1))
cor.test(d2$greenVertical, d2$redHorizontal)
#bayes_R2(brm(greenVertical ~ redHorizontal, data = d2))
d %>% filter(accuracy == 1) %>%
group_by(obs, type, targ, nD) %>%
summarise(median_rt = median(rt)) -> drt
drt %>%
ggplot(aes(x = nD, y = median_rt, colour = type)) +
geom_jitter(alpha = 0.5, width = 0.5, height = 0) +
facet_wrap(~targ) +
geom_smooth(method = "lm", se = FALSE, formula = y~x) +
scale_colour_manual(values = c("#228833", "#EE6677")) +
scale_x_continuous("number of distracters") +
scale_y_continuous("median reaction time (seconds)") +
theme(legend.position = "bottom") -> plt_rt
drt %>% group_by(obs, type) %>%
summarise(mean_med_rt = mean(median_rt)) %>%
pivot_wider(values_from = "mean_med_rt", names_from = "type") %>%
ggplot(aes(x = greenVertical, y = redHorizontal)) +
geom_jitter(alpha = 0.5, width = 0.005, height = 0.005) +
geom_abline(linetype = 2) +
coord_fixed(xlim = c(0.5, 1.4), ylim = c(0.5, 1.4)) +
scale_x_continuous("green vertical") +
scale_y_continuous("red  vertical") -> plt_rt2
(plt_acc + plt_acc2) / (plt_rt + plt_rt2) + plot_layout(widths = c(2, 1), guides = "collect") & theme(legend.position = "none")
ggsave("../manuscript/figs/exp_lvl_3_emp.pdf", height = 6, width = 9)
d %>% group_by(obs, type, targ) %>%
summarise(rt = median(rt)) %>%
filter(targ == "absent") %>%
pivot_wider(values_from = "rt", names_from = "type") -> d2
cor.test(d2$greenVertical, d2$redHorizontal)
m <- readRDS("models/level3_full.model")
d %>%
mutate(obs = as.factor(obs),
nD = nD/max(nD)) -> d
#
# pred_wiener <- d %>% add_predicted_draws(m,negative_rt = TRUE, n = 100) %>%
#   ungroup() %>%
#   select(-.chain, -.draw, -.iteration, -.row) %>%
#   mutate(rt = if_else(response == 1, rt, -rt)) %>%
#   pivot_longer(c(rt, .prediction), names_to = "emp_pre", values_to = "rt") %>%
#   select(-response, -accuracy) %>%
#   mutate(emp_pre = fct_recode(emp_pre, empirical = "rt", prediction = ".prediction"),
#                               response = if_else(rt < 0, "absent", "present"),
#                               response = as_factor(response),
#                               accuracy = response == targ,
#                               rt = abs(rt))
# write_csv(pred_wiener, "predictions_full.csv")
pred_wiener <- read_csv("predictions_full.csv")
ggplot(pred_wiener, aes(x = rt, fill = emp_pre)) +
geom_density(alpha = 0.25) +
facet_grid(nD~targ) +
coord_cartesian(xlim = c(0, 2))
pred_wiener %>% group_by(obs, targ, type, nD, emp_pre) %>%
summarise(median_rt = median(rt), .groups = "drop") %>%
pivot_wider(names_from = "emp_pre", values_from = "median_rt") %>%
ggplot(aes(x = prediction, y = empirical, colour = type)) +
geom_abline(linetype = 2) +
geom_point(alpha = 0.5) +
coord_fixed() +
scale_colour_manual(values = c("#228833", "#EE6677")) +
facet_wrap(~targ) +
theme(legend.position = "none") -> plt_rt
pred_wiener %>% group_by(obs, targ, type, nD, emp_pre) %>%
summarise(accuracy = mean(accuracy), .groups = "drop") %>%
pivot_wider(names_from = "emp_pre", values_from = "accuracy") %>%
ggplot(aes(x = prediction, y = empirical, colour = type)) +
geom_abline(linetype = 2) +
scale_colour_manual(values = c("#228833", "#EE6677")) +
facet_wrap(~targ) +
coord_fixed(xlim = c(0.5, 1), ylim = c(0.5, 1)) +
geom_jitter(alpha = 0.25, height = 0.01)  +
theme(legend.position = "none") -> plt_acc
plt_acc / plt_rt
# ggsave("../manuscript/figs/exp_lvl_3_pred.pdf", height = 6, width = 5)
m %>% gather_draws(`cor.*`, regex = TRUE) %>%
rename(var = ".variable") %>%
mutate(var = str_remove(var, "cor_observer__")) -> cor_post
cor_post %>% group_by(var) %>%
summarise(p_not_zero = max(mean(.value > 0), mean(.value < 0))) %>%
mutate(p_not_zero = cut(p_not_zero, c(0.5, 0.8, 0.9, 0.95, 0.99, 1))) %>%
full_join(cor_post, by = "var") %>%
select(-.chain, -.iteration , -.draw) -> cp
summary(m)
m_full <- readRDS("models/level3_full.model")
m_full <- bridge_sampler(m_full, silent = TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?post_prob
waic(m_full, m_redu)
loo(m_full, m_redu)
loo_compare(m_full, m_redu)
m_full <- add_criterion(m_full, "loo")
m_redu <- add_criterion(m_redu, "loo")
loo_compare(m_full, m_redu)
?loo_compare
post_prob(m_full, m_redu)
library(tidyverse)
library(ggthemes)
library(brms)
#library(tidybayes)
library(corrr)
library(patchwork)
options(digits = 2, mc.cores = 10)
knitr::opts_chunk$set(echo = TRUE)
my_cols <- cols(
observer = col_character(),
data_from = col_character(),
trial = col_character(),
difficulty = col_character(),
targ = col_character(),
rt = col_double(),
accuracy = col_double()
)
d <- read_csv("../pilot_data/pilot_data.txt", col_types = my_cols) %>%
glimpse() %>%
mutate(difficulty = as_factor(difficulty),
difficulty = fct_relevel(difficulty, "easy", "mid", "hard"))
d %>% group_by(observer, data_from) %>%
summarise(accuracy = mean(accuracy), .groups = "drop") %>%
ggplot(aes(x = observer, y = accuracy, fill = data_from)) +
geom_col() +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ggthemes::scale_fill_pander()
d
d %>% group_by(observer, data_from) %>%
summarise(accuracy = mean(accuracy), .groups = "drop")
d %>% group_by(observer) %>%
summarise(accuracy = mean(accuracy), .groups = "drop") %>%
ggplot(aes(x = observer, y = accuracy, fill = data_from)) +
geom_col() +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ggthemes::scale_fill_pander()
d %>% group_by(observer) %>%
summarise(accuracy = mean(accuracy), .groups = "drop") %>%
ggplot(aes(x = observer, y = accuracy)) +
geom_col() +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ggthemes::scale_fill_pander()
d %>% filter(targ == "absent", difficulty == "easy") %>%
group_by(observer, difficulty, trial) %>%
summarise(accuracy = mean(accuracy), .groups = "drop") %>%
ggplot(aes(x = observer, y = accuracy)) +
geom_col(position = position_dodge()) +
facet_wrap(~trial, ncol = 1) +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ggthemes::scale_fill_pander() +
ggtitle("Easy Target Absent Trials")
d
my_cols <- cols(
observer = col_character(),
trial = col_character(),
difficulty = col_character(),
targ = col_character(),
rt = col_double(),
accuracy = col_double()
)
d <- read_csv("../pilot_data/pilot_data.txt", col_types = my_cols) %>%
glimpse() %>%
mutate(difficulty = as_factor(difficulty),
difficulty = fct_relevel(difficulty, "easy", "mid", "hard"))
d <- read_csv("../pilot_data/pilot_data.txt", col_types = my_cols) %>%
glimpse() %>%
mutate(difficulty = as_factor(difficulty),
difficulty = fct_relevel(difficulty, "easy", "mid", "hard"),
targ = if_else(targPresent==1, "present", "absent"))
d
d <- read_csv("../pilot_data/pilot_data.txt", col_types = my_cols) %>%
glimpse() %>%
mutate(difficulty = as_factor(difficulty),
difficulty = fct_relevel(difficulty, "easy", "mid", "hard"),
targ = if_else(targPresent ==1, "present", "absent"))
d <- read_csv("../pilot_data/pilot_data.txt", col_types = my_cols) %>%
glimpse() %>%
mutate(difficulty = as_factor(difficulty),
difficulty = fct_relevel(difficulty, "easy", "mid", "hard")) %>%
rename(targ = "targPresent")
d
d %>% group_by(observer) %>%
summarise(accuracy = mean(accuracy), .groups = "drop") %>%
ggplot(aes(x = observer, y = accuracy)) +
geom_col() +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ggthemes::scale_fill_pander()
d %>% filter(targ == 0, difficulty == "easy") %>%
group_by(observer, difficulty, trial) %>%
summarise(accuracy = mean(accuracy), .groups = "drop") %>%
ggplot(aes(x = observer, y = accuracy)) +
geom_col(position = position_dodge()) +
facet_wrap(~trial, ncol = 1) +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ggthemes::scale_fill_pander() +
ggtitle("Easy Target Absent Trials")
d <- read_csv("../pilot_data/pilot_data.txt", col_types = my_cols) %>%
glimpse() %>%
mutate(difficulty = as_factor(difficulty),
difficulty = fct_relevel(difficulty, "easy", "mid", "hard")) %>%
rename(targ = "targPresent", trial = "targetType")
d %>% filter(targ == 0, difficulty == "easy") %>%
group_by(observer, difficulty, trial) %>%
summarise(accuracy = mean(accuracy), .groups = "drop") %>%
ggplot(aes(x = observer, y = accuracy)) +
geom_col(position = position_dodge()) +
facet_wrap(~trial, ncol = 1) +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ggthemes::scale_fill_pander() +
ggtitle("Easy Target Absent Trials")
d %>% filter(targ == 0, difficulty == "easy") %>%
group_by(observer, difficulty, trial) %>%
summarise(accuracy = mean(accuracy), .groups = "drop") %>%
filter(accuracy < 0.75) %>%
unite("key", observer, trial) -> to_remove
d %>% unite("key", observer, trial, remove = FALSE) %>%
filter(!(key %in% to_remove$key)) %>%
select(-key) -> d
rm(to_remove)
d %>% filter(accuracy == 1) %>%
group_by(observer, data_from, trial, targ, difficulty) %>%
summarise(med_rt = median(rt), .groups = "drop") %>%
mutate(difficulty = as.numeric(difficulty)) %>%
ggplot(aes(x = difficulty, y = med_rt, colour = data_from)) +
geom_jitter(height = 0) +
facet_grid(targ~trial) +
ggthemes::scale_color_pander()
d %>% filter(accuracy == 1) %>%
group_by(observer, trial, targ, difficulty) %>%
summarise(med_rt = median(rt), .groups = "drop") %>%
mutate(difficulty = as.numeric(difficulty)) %>%
ggplot(aes(x = difficulty, y = med_rt, colour = data_from)) +
geom_jitter(height = 0) +
facet_grid(targ~trial) +
ggthemes::scale_color_pander()
d %>% filter(accuracy == 1) %>%
group_by(observer, trial, targ, difficulty) %>%
summarise(med_rt = median(rt), .groups = "drop") %>%
mutate(difficulty = as.numeric(difficulty)) %>%
ggplot(aes(x = difficulty, y = med_rt)) +
geom_jitter(height = 0) +
facet_grid(targ~trial) +
ggthemes::scale_color_pander()
