d$prior <- dnorm(p, 0.5, 0.2)
d <- data.frame(p = seq(0, 1, 0.01))
d$prior <- dnorm(p, 0.5, 0.2)
d <- data.frame(p = seq(0, 1, 0.01))
d$prior <- dnorm(d$p, 0.5, 0.2)
d$lik <- dbinom(5, 7, d$p)
d$post <- d$prior * d$lik
d$post <- length(d$post) * d$post / sum(d$post)
plot(d$p, d$post)
points(d$p, d$prior)
d$p[which(d$post == max(d$post))]
5/7
d <- data.frame(p = seq(0, 1, 0.01))
d$prior <- dunif(d$p, 0, 1)
d$lik <- dbinom(5, 7, d$p)
d$post <- d$prior * d$lik
d$post <- length(d$post) * d$post / sum(d$post)
d$p[which(d$post == max(d$post))]
max(d$post)
which(d$post == max(d$post))
d$p[which(d$post == max(d$post))]
d <- data.frame(p = seq(0, 1, 0.01))
d$prior <- dnorm(d$p, 0.5, 0.2)
d$lik <- dbinom(5, 7, d$p)
d$post <- d$prior * d$lik
d$post <- length(d$post) * d$post / sum(d$post)
d$p[which(d$post == max(d$post))]
101^2
plot(d$p, d$post, col = "purple")
lines(d$p, dnorm(d$p, 0.62, 0.15))
lines(d$p, dnorm(d$p, 0.6, 0.15))
lines(d$p, dnorm(d$p, 0.6, 0.12))
lines(d$p, dnorm(d$p, 0.6, 0.14))
plot(d$p, d$post, col = "purple")
lines(d$p, dnorm(d$p, 0.61, 0.14))
library(rethinking)
d
sample(d$p, prob=d$post, 10000)
sample(d$p, prob=d$post, 1000)
sample(d$p, prob=d$post, size=1000)
sample(d$p, prob=d$post, size=1000, replace = TRUE)
mean(sample(d$p, prob=d$post, size=1000, replace = TRUE))
std(sample(d$p, prob=d$post, size=1000, replace = TRUE))
sd(sample(d$p, prob=d$post, size=1000, replace = TRUE))
plot(d$p, d$post, col = "purple")
lines(d$p, dnorm(d$p, 0.6053, 0.12579))
library(tidyverse)
library(ggthemes)
library(brms)
library(tidybayes)
options(digits = 2, mc.cores = 10)
knitr::opts_chunk$set(echo = TRUE)
my_cols <- cols(
observer = col_character(),
data_from = col_character(),
trial = col_character(),
difficulty = col_character(),
targ = col_character(),
rt = col_double(),
accuracy = col_double()
)
d <- read_csv("../pilot_data/pilot_data.csv", col_types = my_cols) %>%
glimpse() %>%
mutate(difficulty = as_factor(difficulty),
difficulty = fct_relevel(difficulty, "easy", "mid", "hard"))
d %>% group_by(observer, data_from) %>%
summarise(accuracy = mean(accuracy), .groups = "drop") %>%
ggplot(aes(x = observer, y = accuracy, fill = data_from)) +
geom_col() +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ggthemes::scale_fill_pander()
d <- filter(d, observer != "obs3")
d %>% filter(accuracy == 1) %>%
group_by(observer, data_from, trial, targ, difficulty) %>%
summarise(med_rt = median(rt), .groups = "drop") %>%
mutate(difficulty = as.numeric(difficulty)) %>%
ggplot(aes(x = difficulty, y = med_rt, colour = data_from)) +
geom_jitter(height = 0) +
facet_grid(targ~trial) +
ggthemes::scale_color_pander()
d %>% group_by(observer) %>%
summarise(min_rt = min(rt), .groups = "drop") %>%
ggplot(aes(x = min_rt)) + geom_histogram(bins = 20, colour = "black") +
geom_vline(xintercept = 0.250, linetype = 2) +
ggtitle("min RT per observer")
d %>% group_by(observer) %>%
summarise(max_rt = max(rt), .groups = "drop") %>%
ggplot(aes(x = max_rt)) + geom_histogram(bins = 20, colour = "black") +
geom_vline(xintercept = 250, linetype = 2) +
ggtitle("max RT per observer") +
scale_x_log10()
ggplot(d, aes(x = rt)) + geom_histogram(bins = 50) +
scale_x_log10() +
geom_vline(xintercept = c(0.250, 250), linetype = 2) +
ggtitle("all RTs")
d %>%
summarise(percent_below = 100*mean(rt<0.250),
percent_above = 100*mean(rt>250),
percent_removed = percent_below + percent_above) %>%
knitr::kable()
d <- filter(d, rt>0.250, rt<250)
d$response <- NA
d$response[which(d$targ=="present" & d$accuracy==1)] = 1
d$response[which(d$targ=="present" & d$accuracy==0)] = 0
d$response[which(d$targ=="absent" & d$accuracy==1)] = 0
d$response[which(d$targ=="absent" & d$accuracy==0)] = 1
write_csv(d, "../cluster/data_for_model.csv")
library(tidyverse)
library(ggthemes)
library(brms)
library(tidybayes)
options(digits = 2, mc.cores = 10)
knitr::opts_chunk$set(echo = TRUE)
my_cols <- cols(
observer = col_character(),
data_from = col_character(),
trial = col_character(),
difficulty = col_character(),
targ = col_character(),
rt = col_double(),
accuracy = col_double()
)
d <- read_csv("../pilot_data/pilot_data.csv", col_types = my_cols) %>%
glimpse() %>%
mutate(difficulty = as_factor(difficulty),
difficulty = fct_relevel(difficulty, "easy", "mid", "hard"))
d %>% group_by(observer, data_from) %>%
summarise(accuracy = mean(accuracy), .groups = "drop") %>%
ggplot(aes(x = observer, y = accuracy, fill = data_from)) +
geom_col() +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ggthemes::scale_fill_pander()
d <- filter(d, observer != "obs3")
d %>% filter(accuracy == 1) %>%
group_by(observer, data_from, trial, targ, difficulty) %>%
summarise(med_rt = median(rt), .groups = "drop") %>%
mutate(difficulty = as.numeric(difficulty)) %>%
ggplot(aes(x = difficulty, y = med_rt, colour = data_from)) +
geom_jitter(height = 0) +
facet_grid(targ~trial) +
ggthemes::scale_color_pander()
d %>% group_by(observer) %>%
summarise(min_rt = min(rt), .groups = "drop") %>%
ggplot(aes(x = min_rt)) + geom_histogram(bins = 20, colour = "black") +
geom_vline(xintercept = 0.250, linetype = 2) +
ggtitle("min RT per observer")
d %>% group_by(observer) %>%
summarise(max_rt = max(rt), .groups = "drop") %>%
ggplot(aes(x = max_rt)) + geom_histogram(bins = 20, colour = "black") +
geom_vline(xintercept = 250, linetype = 2) +
ggtitle("max RT per observer") +
scale_x_log10()
ggplot(d, aes(x = rt)) + geom_histogram(bins = 50) +
scale_x_log10() +
geom_vline(xintercept = c(0.250, 250), linetype = 2) +
ggtitle("all RTs")
d %>%
summarise(percent_below = 100*mean(rt<0.250),
percent_above = 100*mean(rt>250),
percent_removed = percent_below + percent_above) %>%
knitr::kable()
d <- filter(d, rt>0.250, rt<250)
d$response <- NA
d$response[which(d$targ=="present" & d$accuracy==1)] = 1
d$response[which(d$targ=="present" & d$accuracy==0)] = 0
d$response[which(d$targ=="absent" & d$accuracy==1)] = 0
d$response[which(d$targ=="absent" & d$accuracy==0)] = 1
write_csv(d, "../cluster/data_for_model.csv")
d
d %>% group_by(observer, trial, targ) %>%
summarise(accuracy = mean(accuracy), .groups = "drop")
d %>% group_by(observer, trial, targ) %>%
summarise(accuracy = mean(accuracy), .groups = "drop") %>%
unite(trial, targ)
d %>% group_by(observer, trial, targ) %>%
summarise(accuracy = mean(accuracy), .groups = "drop") %>%
unite(c(trial, targ))
d %>% group_by(observer, trial, targ) %>%
summarise(accuracy = mean(accuracy), .groups = "drop") %>%
unite(c(trial, targ), a)
d %>% group_by(observer, trial, targ) %>%
summarise(accuracy = mean(accuracy), .groups = "drop") %>%
unite(c(trial, targ), "a")
d %>% group_by(observer, trial, targ) %>%
summarise(accuracy = mean(accuracy), .groups = "drop") %>%
unite("a", c(trial, targ))
d %>% group_by(observer, trial, targ) %>%
summarise(accuracy = mean(accuracy), .groups = "last") %>%
unite("condition", c(trial, targ))
d %>% group_by(trial, targ, observer) %>%
summarise(accuracy = mean(accuracy), .groups = "drp_last") %>%
unite("condition", c(trial, targ))
d %>% group_by(trial, targ, observer) %>%
summarise(accuracy = mean(accuracy), .groups = "drop_last") %>%
unite("condition", c(trial, targ))
d %>% group_by(trial, targ, observer) %>%
summarise(accuracy = mean(accuracy), .groups = "drop_last") %>%
unite("condition", c(trial, targ)) %>%
summarise(corr(accuracy))
install.packages("corrr")
library(corrr)
d %>% group_by(trial, targ, observer) %>%
summarise(accuracy = mean(accuracy), .groups = "drop_last") %>%
unite("condition", c(trial, targ)) %>%
correlate()
d %>% group_by(trial, targ, observer) %>%
summarise(accuracy = mean(accuracy), .groups = "drop_last") %>%
unite("condition", c(trial, targ)) %>%
correlate(accuracy)
d %>% group_by(trial, targ, observer) %>%
summarise(accuracy = mean(accuracy), .groups = "drop_last") %>%
unite("condition", c(trial, targ)
d %>% group_by(trial, targ, observer) %>%
d %>% group_by(trial, targ, observer) %>%
summarise(accuracy = mean(accuracy), .groups = "drop_last") %>%
unite("condition", c(trial, targ)) %>%
select(-observer)
d %>% group_by(trial, targ, observer) %>%
summarise(accuracy = mean(accuracy), .groups = "drop_last") %>%
unite("condition", c(trial, targ)) %>%
select(-observer) %>%
correlate(accuracy)
d %>% group_by(trial, targ, observer) %>%
summarise(accuracy = mean(accuracy), .groups = "drop_last") %>%
unite("condition", c(trial, targ)) %>%
select(-observer) %>%
correlate()
d %>% group_by(trial, targ, observer) %>%
summarise(accuracy = mean(accuracy), .groups = "drop_last") %>%
unite("condition", c(trial, targ)) %>%
select(-observer) %>%
pivot_wider(names_from = "condition", values_from = "accuracy")
d %>% group_by(trial, targ, observer) %>%
summarise(accuracy = mean(accuracy), .groups = "drop_last") %>%
unite("condition", c(trial, targ)) %>%
pivot_wider(names_from = "condition", values_from = "accuracy")
d %>% group_by(trial, targ, observer) %>%
summarise(accuracy = mean(accuracy), .groups = "drop_last") %>%
unite("condition", c(trial, targ)) %>%
pivot_wider(names_from = "condition", values_from = "accuracy") %>%
correlate()
d %>% group_by(trial, targ, observer) %>%
summarise(accuracy = mean(accuracy), .groups = "drop_last") %>%
unite("condition", c(trial, targ)) %>%
pivot_wider(names_from = "condition", values_from = "accuracy") %>%
correlate(-accuracy)
d %>% group_by(trial, targ, observer) %>%
summarise(accuracy = mean(accuracy), .groups = "drop_last") %>%
unite("condition", c(trial, targ)) %>%
pivot_wider(names_from = "condition", values_from = "accuracy") %>%
correlate(-observer)
d %>% group_by(trial, targ, observer) %>%
summarise(accuracy = mean(accuracy), .groups = "drop_last") %>%
unite("condition", c(trial, targ)) %>%
pivot_wider(names_from = "condition", values_from = "accuracy") %>%
select(-observer) %>%
correlate()
library(tidyverse)
library(ggthemes)
#library(brms)
#library(tidybayes)
library(corrr)
options(digits = 2, mc.cores = 10)
knitr::opts_chunk$set(echo = TRUE)
d %>% group_by(trial, targ, observer) %>%
summarise(accuracy = mean(accuracy), .groups = "drop_last") %>%
unite("condition", c(trial, targ)) %>%
pivot_wider(names_from = "condition", values_from = "accuracy") %>%
select(-observer) -> d_acc
d_acc
d %>% group_by(trial, targ, observer) %>%
summarise(accuracy = mean(accuracy), .groups = "dropt")
d %>% group_by(trial, targ, observer) %>%
summarise(accuracy = mean(accuracy), .groups = "drop")
d %>% group_by(trial, targ, observer) %>%
summarise(accuracy = mean(accuracy), .groups = "drop") %>%
pivot_wider(names_from = "trial", values_from = "accuracy")
d %>% group_by(trial, targ, observer) %>%
summarise(accuracy = mean(accuracy), .groups = "drop") %>%
pivot_wider(names_from = "trial", values_from = "accuracy") -> dplt
dplt
v1 = "conj"
v2 = "tex"
gplot(dplt, aes(x = conj, y = ori)) + goem_points(alpha = 0.5) +
facet_wrap(~taret, ncol = 1)
ggplot(dplt, aes(x = conj, y = ori)) + goem_points(alpha = 0.5) +
facet_wrap(~taret, ncol = 1)
ggplot(dplt, aes(x = conj, y = ori)) + geom_points(alpha = 0.5) +
facet_wrap(~taret, ncol = 1)
ggplot(dplt, aes(x = conj, y = ori)) + geom_point(alpha = 0.5) +
facet_wrap(~taret, ncol = 1)
library(tidyverse)
library(ggthemes)
#library(brms)
#library(tidybayes)
library(corrr)
options(digits = 2, mc.cores = 10)
knitr::opts_chunk$set(echo = TRUE)
my_cols <- cols(
observer = col_character(),
data_from = col_character(),
trial = col_character(),
difficulty = col_character(),
targ = col_character(),
rt = col_double(),
accuracy = col_double()
)
d <- read_csv("../pilot_data/pilot_data.csv", col_types = my_cols) %>%
glimpse() %>%
mutate(difficulty = as_factor(difficulty),
difficulty = fct_relevel(difficulty, "easy", "mid", "hard"))
d %>% group_by(observer, data_from) %>%
summarise(accuracy = mean(accuracy), .groups = "drop") %>%
ggplot(aes(x = observer, y = accuracy, fill = data_from)) +
geom_col() +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ggthemes::scale_fill_pander()
d <- filter(d, observer != "obs3")
d %>% filter(accuracy == 1) %>%
group_by(observer, data_from, trial, targ, difficulty) %>%
summarise(med_rt = median(rt), .groups = "drop") %>%
mutate(difficulty = as.numeric(difficulty)) %>%
ggplot(aes(x = difficulty, y = med_rt, colour = data_from)) +
geom_jitter(height = 0) +
facet_grid(targ~trial) +
ggthemes::scale_color_pander()
d %>% group_by(observer) %>%
summarise(min_rt = min(rt), .groups = "drop") %>%
ggplot(aes(x = min_rt)) + geom_histogram(bins = 20, colour = "black") +
geom_vline(xintercept = 0.250, linetype = 2) +
ggtitle("min RT per observer")
d %>% group_by(observer) %>%
summarise(max_rt = max(rt), .groups = "drop") %>%
ggplot(aes(x = max_rt)) + geom_histogram(bins = 20, colour = "black") +
geom_vline(xintercept = 250, linetype = 2) +
ggtitle("max RT per observer") +
scale_x_log10()
ggplot(d, aes(x = rt)) + geom_histogram(bins = 50) +
scale_x_log10() +
geom_vline(xintercept = c(0.250, 250), linetype = 2) +
ggtitle("all RTs")
d %>%
summarise(percent_below = 100*mean(rt<0.250),
percent_above = 100*mean(rt>250),
percent_removed = percent_below + percent_above) %>%
knitr::kable()
d <- filter(d, rt>0.250, rt<250)
d$response <- NA
d$response[which(d$targ=="present" & d$accuracy==1)] = 1
d$response[which(d$targ=="present" & d$accuracy==0)] = 0
d$response[which(d$targ=="absent" & d$accuracy==1)] = 0
d$response[which(d$targ=="absent" & d$accuracy==0)] = 1
write_csv(d, "../cluster/data_for_model.csv")
d %>% group_by(trial, targ, observer) %>%
summarise(accuracy = mean(accuracy), .groups = "drop_last") %>%
unite("condition", c(trial, targ)) %>%
pivot_wider(names_from = "condition", values_from = "accuracy") %>%
select(-observer) %>%
correlate() %>%
knitr::kable()
d %>% group_by(trial, targ, observer) %>%
summarise(accuracy = mean(accuracy), .groups = "drop") %>%
pivot_wider(names_from = "trial", values_from = "accuracy") -> dplt
ggplot(dplt, aes(x = conj, y = ori)) + geom_point(alpha = 0.5) +
facet_wrap(~taret, ncol = 1)
ggplot(dplt, aes(x = conj, y = ori)) + geom_point(alpha = 0.5) +
facet_wrap(~target, ncol = 1)
ggplot(dplt, aes(x = conj, y = ori)) + geom_point(alpha = 0.5) +
facet_wrap(~targ, ncol = 1)
library(patchwork)
plt1 <- ggplot(dplt, aes(x = conj, y = ori)) + geom_point(alpha = 0.5) +
facet_wrap(~targ, ncol = 1) + ggtitle("conjunction - orientation")
plt2 <- ggplot(dplt, aes(x = conj, y = tex)) + geom_point(alpha = 0.5) +
facet_wrap(~targ, ncol = 1) + ggtitle("conjunction - texture")
plt3 <- ggplot(dplt, aes(x = ori, y = tex)) + geom_point(alpha = 0.5) +
facet_wrap(~targ, ncol = 1) + ggtitle("orientation - texture")
plt1 + plt2 + pl3
plt1 + plt2 + plt3
library(tidyverse)
library(brms)
library(tidybayes)
library(patchwork)
d <- read_csv("../data_prolific/accuracy_rt_data.txt") %>%
mutate(
targ_present = as_factor(targPresent),
targ_present = fct_recode(targ_present, present = "1", absent = "0"),
trial_type = as_factor(targetType),
difficulty = as.numeric(as_factor(difficulty))) %>%
select(observer, trial="trial_type", targ="targ_present", difficulty, n, rt, accuracy)
d$response <- NA
d$response[which(d$targ=="present" & d$accuracy==1)] = 1
d$response[which(d$targ=="present" & d$accuracy==0)] = 0
d$response[which(d$targ=="absent" & d$accuracy==1)] = 0
d$response[which(d$targ=="absent" & d$accuracy==0)] = 1
summary(d)
# remove some outliers
d <- filter(d, rt > 0.2, rt < 20)
fit_wiener <- readRDS("../cluster/fit_wiener.model")
fit_wiener <- readRDS("../cluster/wiener_fit.model")
fit_wiener
library(tidyverse)
library(brms)
library(tidybayes)
library(patchwork)
d <- read_csv("../data_prolific/accuracy_rt_data.txt") %>%
mutate(
targ_present = as_factor(targPresent),
targ_present = fct_recode(targ_present, present = "1", absent = "0"),
trial_type = as_factor(targetType),
difficulty = as.numeric(as_factor(difficulty))) %>%
select(observer, trial="trial_type", targ="targ_present", difficulty, n, rt, accuracy)
d$response <- NA
d$response[which(d$targ=="present" & d$accuracy==1)] = 1
d$response[which(d$targ=="present" & d$accuracy==0)] = 0
d$response[which(d$targ=="absent" & d$accuracy==1)] = 0
d$response[which(d$targ=="absent" & d$accuracy==0)] = 1
summary(d)
# remove some outliers
d <- filter(d, rt > 0.2, rt < 20)
fit_wiener <- readRDS("models/wiener_fit.model")
summary(fit_wiener)
fit_wiener %>% gather_draws(`cor.*`, regex = TRUE) %>%
rename(var = ".variable") %>%
mutate(var = str_remove(var, "cor_observer__")) -> cor_post
paradigms <- "(tex|line|greenVertical)"
vars <- c("targpresent:trial", "targabsent:trial",
"bias_trial", "bs_trial" )
comparison_intercepts <-  paste(vars, paradigms, "__", vars, paradigms, sep = "")
comparison_slopes <-   paste(vars, paradigms, ":difficulty__", vars, paradigms, ":difficulty", sep = "")
plt_cors <- function(comps, slopes = FALSE) {
cor_post %>% group_by(var) %>%
summarise(p_not_zero = max(mean(.value > 0), mean(.value < 0))) %>%
mutate(p_not_zero = round(p_not_zero, 1),
p_not_zero = as.factor(p_not_zero)) %>%
full_join(cor_post) -> cp
if (slopes) {
cp  %>%  filter(str_detect(var, comps))  %>%
separate(var,   into = c("targ1", "paradigm1", "diff1", "targ2", "paradigm2", "diff2")) -> cp
} else {
cp %>%
filter(str_detect(var, comps), !str_detect(var, "difficulty")) %>%
separate(var, into = c("targ1", "paradigm1", "trag2", "paradigm2")) -> cp
}
cp %>% mutate(comparison = paste(paradigm1, paradigm2), target = targ1) %>%
select(target, comparison, .value, p_not_zero) %>%
mutate(
target = str_remove_all(target, "targ"),
comparison = str_remove_all(comparison, "trial")) ->  cp
plt <- ggplot(cp, aes(x = .value, y= target, fill = p_not_zero)) +
geom_vline(xintercept = 0, linetype = 2) +
ggridges::geom_density_ridges(alpha = 0.5) +
facet_wrap(~comparison) +
scale_fill_viridis_d("prob >< 0") +
scale_x_continuous("estimated correlation coefficent") +
theme_bw() +
theme(axis.title.y = element_blank())
return(plt)
}
plt_cors(comparison_slopes, TRUE) + ggtitle("correlation of observer rate slopes") -> plt_cor
plt_cors(comparison_intercepts[!str_detect(comparison_intercepts, "(bias_|bs_)")]) +
ggtitle("correlation of observer rate interecepts") -> plt_int
linear_pred <- function(ii, d) {
x = 1:3
out <- tibble(
participant = d$participant[ii],
targ = d$targ[ii],
trial = d$trial[ii],
x  =1:3,
rate = d$intercept[ii] + x * d$slope[ii]
)
return(out)
}
# get fixed effects
fit_wiener %>% gather_draws(`b.*`, regex = TRUE, n = 2) %>%
rename(var = ".variable") %>%
mutate(var = str_remove(var, "b_"))  %>%
filter(!str_detect(var, "(bs|bias|ndt)_")) %>%
mutate(param = if_else(str_detect(var, "difficulty"), "slope", "intercept"),
var = str_remove(var, ":difficulty")) %>%
separate(var, into = c("targ", "trial")) %>%
mutate(targ = str_remove(targ, "targ"),
trial = str_remove(trial, "trial")) %>%
select(-.chain, -.iteration) %>%
pivot_wider(names_from = "param", values_from = ".value")  -> rate_samples
# get participant estimates
fit_wiener %>% gather_draws(`r_observer\\[.*`, regex = TRUE) %>%
separate(.variable, into = c("participant", "param"), sep = ",") %>%
mutate(param = str_remove(param, "\\]"),
participant = str_remove(participant, "r_observer\\["),
param = if_else(str_detect(param, "difficulty"), param, paste(param, ":intercept", sep=""))) %>%
separate(param, c("targ", "trial", "param")) %>%
mutate(targ = str_remove(targ, "targ"),
trial = str_remove(trial, "trial")) %>%
group_by(targ, trial, param, participant) %>%
summarise(value = mean(.value), .groups = "drop") %>%
pivot_wider(names_from = param, values_from = "value") %>%
rename(z_slo = "difficulty", z_int = "intercept") %>%
left_join(rate_samples %>% group_by(targ,trial) %>%
summarise(intercept = mean(intercept),
slope = mean(slope))) %>%
mutate(slope = slope + z_slo,
intercept =  intercept + z_int) %>%
select(targ, trial, participant, intercept, slope) -> rate_participants
rate_samples
summary(fit_wiener)
fit_wiener <- readRDS("models/wiener_fit.model")
library(brms)
sumamry(fit_wiener)
summary(fit_wiener)
