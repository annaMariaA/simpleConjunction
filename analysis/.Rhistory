library(patchwork)
options(digits = 2, mc.cores = 10)
knitr::opts_chunk$set(echo = TRUE)
theme_set(theme_bw())
source("plot_ddm_model.R")
d <- read_csv("../data_collected_by_level_3/Rt_accuracy_extracted.txt") %>%
select(-age, -sex, -n) %>%
select(obs = "observer", type = "targetType", targ = "targetPres", nD = "numDist", rt, accuracy) %>%
mutate(targ = as_factor(targ),
targ = fct_recode(targ, absent = "0", present = "1"))
d
library(tidyverse)
library(ggthemes)
library(brms)
library(tidybayes)
#library(corrr)
library(patchwork)
options(digits = 2, mc.cores = 10)
knitr::opts_chunk$set(echo = TRUE)
theme_set(theme_bw())
source("plot_ddm_model.R")
d <- read_csv("../data_collected_by_level_3/Rt_accuracy_extracted.txt") %>%
select(-age, -sex, -n) %>%
select(obs = "observer", type = "targetType", targ = "targetPres", nD = "numDist", rt, accuracy) %>%
mutate(targ = as_factor(targ),
targ = fct_recode(targ, absent = "0", present = "1"))
d <- filter(d, nD == 15)
d %>% group_by(obs,  targ) %>%
summarise(accuracy = mean(accuracy)) %>%
filter(accuracy < 0.75) -> to_remove
to_remove
library(tidyverse)
library(ggthemes)
library(brms)
library(tidybayes)
#library(corrr)
library(patchwork)
options(digits = 2, mc.cores = 10)
knitr::opts_chunk$set(echo = TRUE)
theme_set(theme_bw())
source("plot_ddm_model.R")
d <- read_csv("../data_collected_by_level_3/Rt_accuracy_extracted.txt") %>%
select(-age, -sex, -n) %>%
select(obs = "observer", type = "targetType", targ = "targetPres", nD = "numDist", rt, accuracy) %>%
mutate(targ = as_factor(targ),
targ = fct_recode(targ, absent = "0", present = "1"))
d %>% group_by(obs,  targ) %>%
summarise(accuracy = mean(accuracy)) %>%
filter(accuracy < 0.75) -> to_remove
to_remove
summary(d) %>% knitr::kable()
summary(d)
library(tidyverse)
library(ggthemes)
library(brms)
library(tidybayes)
#library(corrr)
library(patchwork)
options(digits = 2, mc.cores = 10)
knitr::opts_chunk$set(echo = TRUE)
theme_set(theme_bw())
source("plot_ddm_model.R")
d <- read_csv("../data_collected_by_level_3/Rt_accuracy_extracted.txt") %>%
select(-age, -sex, -n) %>%
select(obs = "observer", type = "targetType", targ = "targetPres", nD = "numDist", rt, accuracy) %>%
mutate(targ = as_factor(targ),
targ = fct_recode(targ, absent = "0", present = "1"),
type = as_factor(type))
d %>% group_by(obs,  targ) %>%
summarise(accuracy = mean(accuracy)) %>%
filter(accuracy < 0.75) -> to_remove
to_remove %>% knitr::kable()
d <- filter(d, !(obs %in% unique(to_remove$obs)))
d <- filter(d, nD == 15)
summary(d)
d %>% group_by(obs, type, targ) %>%
summarise(accuracy = mean(accuracy))
d %>% group_by(obs, type, targ) %>%
summarise(accuracy = mean(accuracy)) %>%
pivot_longer(names_from = "type", values_from = "accuracy")
d %>% group_by(obs, type, targ) %>%
summarise(accuracy = mean(accuracy)) %>%
pivot_longer(names_from = "type", values_from = "accuracy")
d %>% group_by(obs, type, targ) %>%
summarise(accuracy = mean(accuracy)) %>%
pivot_wider(names_from = "type", values_from = "accuracy")
ggplot(d_acc, aes(x = redHorizontal, y = greenVertical)) +
geom_point(alpha = 0.5) +
facet_wrap(~targ)
d %>% group_by(obs, type, targ) %>%
summarise(accuracy = mean(accuracy)) %>%
pivot_wider(names_from = "type", values_from = "accuracy") -> d_acc
ggplot(d_acc, aes(x = redHorizontal, y = greenVertical)) +
geom_point(alpha = 0.5) +
facet_wrap(~targ)
ggplot(d_acc, aes(x = redHorizontal, y = greenVertical)) +
geom_jitter(alpha = 0.5) +
facet_wrap(~targ)
ggplot(d_acc, aes(x = redHorizontal, y = greenVertical)) +
geom_abline(linetype = 2) +
geom_jitter(alpha = 0.5) +
facet_wrap(~targ)
?bayes_R2
cor.test(data = filter(d_acc, targ == "absent"), greenVertical ~ redHorizontal)
cor.test(greenVertical ~ redHorizontal, data = filter(d_acc, targ == "absent"))
data = filter(d_acc, targ == "absent")
data
cor.test(greenVertical ~ redHorizontal, data = filter(d_acc, targ == "absent"))
?cir.test
?cor.test
cor.test(greenVertical, redHorizontal, data = filter(d_acc, targ == "absent"))
with(filter(d_acc, targ == "absent"),  cor.test(greenVertical, redHorizontal))
with(filter(d_acc, targ == "present"),  cor.test(greenVertical, redHorizontal))
d_acc
d_acc <- filter(d_acc, redHorizontal < 0.8)
ggplot(d_acc, aes(x = redHorizontal, y = greenVertical)) +
geom_abline(linetype = 2) +
geom_jitter(alpha = 0.5) +
facet_wrap(~targ)
d_acc
d %>% group_by(obs, type, targ) %>%
summarise(accuracy = mean(accuracy)) %>%
pivot_wider(names_from = "type", values_from = "accuracy") -> d_acc
d_acc <- filter(d_acc, redHorizontal > 0.8)
ggplot(d_acc, aes(x = redHorizontal, y = greenVertical)) +
geom_abline(linetype = 2) +
geom_jitter(alpha = 0.5) +
facet_wrap(~targ)
with(filter(d_acc, targ == "absent"),  cor.test(greenVertical, redHorizontal))
with(filter(d_acc, targ == "present"),  cor.test(greenVertical, redHorizontal))
min_rt = 0.200
max_rt = 10.00
ggplot(d, aes(x = rt)) + geom_histogram(bins = 100) +
geom_vline(xintercept = c(min_rt, max_rt), linetype = 2) +
scale_x_log10() +
coord_cartesian(xlim = c(0.1, 10)) +
ggtitle("all RTs")
d
quartile(d, rt, 0.01)
quantile(d, rt, 0.01)
quantile(d$rt, 0.01)
quantile(d$rt, 0.99)
ggplot(d, aes(x = rt)) + geom_histogram(bins = 100) +
geom_vline(xintercept = c(min_rt, max_rt), linetype = 2) +
scale_x_log10() +
coord_cartesian(xlim = c(0.1, 10)) +
ggtitle("all RTs")
min_rt = quantile(d$rt, 0.01)
max_rt = quantile(d$rt, 0.99)
ggplot(d, aes(x = rt)) + geom_histogram(bins = 100) +
geom_vline(xintercept = c(min_rt, max_rt), linetype = 2) +
scale_x_log10() +
coord_cartesian(xlim = c(0.1, 10)) +
ggtitle("all RTs")
min_rt = quantile(d$rt, 0.001)
max_rt = quantile(d$rt, 0.999)
ggplot(d, aes(x = rt)) + geom_histogram(bins = 100) +
geom_vline(xintercept = c(min_rt, max_rt), linetype = 2) +
scale_x_log10() +
coord_cartesian(xlim = c(0.1, 10)) +
ggtitle("all RTs")
min_rt = quantile(d$rt, 0.005)
max_rt = quantile(d$rt, 0.995)
ggplot(d, aes(x = rt)) + geom_histogram(bins = 100) +
geom_vline(xintercept = c(min_rt, max_rt), linetype = 2) +
scale_x_log10() +
coord_cartesian(xlim = c(0.1, 10)) +
ggtitle("all RTs")
d %>%
summarise(percent_below = 100*mean(rt<min_rt),
percent_above = 100*mean(rt>max_rt),
percent_removed = percent_below + percent_above) %>%
knitr::kable()
d <- filter(d, rt>min_rt, rt<max_rt)
d %>% group_by(obs, type, targ) %>%
summarise(rt = median(rt)) %>%
pivot_wider(names_from = "type", values_from = "accuracy") -> d_rt
ggplot(d_rt, aes(x = redHorizontal, y = greenVertical)) +
geom_abline(linetype = 2) +
geom_jitter(alpha = 0.5) +
facet_wrap(~targ)
d %>% group_by(obs, type, targ) %>%
summarise(rt = median(rt)) %>%
pivot_wider(names_from = "type", values_from = "rt") -> d_rt
ggplot(d_rt, aes(x = redHorizontal, y = greenVertical)) +
geom_abline(linetype = 2) +
geom_jitter(alpha = 0.5) +
facet_wrap(~targ)
with(filter(d_rt, targ == "absent"),  cor.test(greenVertical, redHorizontal))
with(filter(d_rt, targ == "present"),  cor.test(greenVertical, redHorizontal))
with(filter(d_rt, targ == "absent"),  cor.test(greenVertical, redHorizontal))
with(filter(d_rt, targ == "present"),  cor.test(greenVertical, redHorizontal))
d %>% group_by(obs, type, targ, nD) %>%
summarise(accuracy = mean(accuracy)) %>%
ggplot(aes(x = as.factor(nD), y = accuracy, fill = type)) +
geom_boxplot(alpha = 0.5) +
facet_wrap(~targ) +
scale_fill_manual(values = c("#228833", "#EE6677")) +
scale_x_discrete("number of distracters") +
theme(legend.position = "bottom") -> plt_acc
d %>% group_by(obs, type, targ, nD) %>%
summarise(accuracy = mean(accuracy)) %>%
filter(targ == "present", nD == 15) %>%
pivot_wider(values_from = "accuracy", names_from = "type") -> d2
ggplot(d2, aes(x = greenVertical, y = redHorizontal)) +
geom_jitter(alpha = 0.5, width = 0.005, height = 0.005) +
geom_abline(linetype = 2) +
coord_fixed(xlim = c(0.7, 1), ylim = c(0.7, 1)) +
scale_x_continuous("green vertical") +
scale_y_continuous("red  vertical") -> plt_acc2
plt_acc + plt_acc2 + plot_layout(widths = c(2, 1))
library(tidyverse)
library(ggthemes)
library(brms)
library(tidybayes)
#library(corrr)
library(patchwork)
options(digits = 2, mc.cores = 10)
knitr::opts_chunk$set(echo = TRUE)
theme_set(theme_bw())
source("plot_ddm_model.R")
d <- read_csv("../data_collected_by_level_3/Rt_accuracy_extracted.txt") %>%
select(-age, -sex, -n) %>%
select(obs = "observer", type = "targetType", targ = "targetPres", nD = "numDist", rt, accuracy) %>%
mutate(targ = as_factor(targ),
targ = fct_recode(targ, absent = "0", present = "1"),
type = as_factor(type))
d %>% group_by(obs,  targ) %>%
summarise(accuracy = mean(accuracy)) %>%
filter(accuracy < 0.75) -> to_remove
to_remove %>% knitr::kable()
d <- filter(d, !(obs %in% unique(to_remove$obs)))
d <- filter(d, nD == 15)
summary(d)
d %>% group_by(obs, type, targ) %>%
summarise(accuracy = mean(accuracy)) %>%
pivot_wider(names_from = "type", values_from = "accuracy") -> d_acc
ggplot(d_acc, aes(x = redHorizontal, y = greenVertical)) +
geom_abline(linetype = 2) +
geom_jitter(alpha = 0.5) +
facet_wrap(~targ)
with(filter(d_acc, targ == "absent"),  cor.test(greenVertical, redHorizontal))
with(filter(d_acc, targ == "present"),  cor.test(greenVertical, redHorizontal))
min_rt = quantile(d$rt, 0.005)
max_rt = quantile(d$rt, 0.995)
ggplot(d, aes(x = rt)) + geom_histogram(bins = 100) +
geom_vline(xintercept = c(min_rt, max_rt), linetype = 2) +
scale_x_log10() +
coord_cartesian(xlim = c(0.1, 10)) +
ggtitle("all RTs")
d <- filter(d, rt>min_rt, rt<max_rt)
d %>% group_by(obs, type, targ) %>%
summarise(rt = median(rt)) %>%
pivot_wider(names_from = "type", values_from = "rt") -> d_rt
ggplot(d_rt, aes(x = redHorizontal, y = greenVertical)) +
geom_abline(linetype = 2) +
geom_jitter(alpha = 0.5) +
facet_wrap(~targ)
with(filter(d_rt, targ == "absent"),  cor.test(greenVertical, redHorizontal))
with(filter(d_rt, targ == "present"),  cor.test(greenVertical, redHorizontal))
d$response <- NA
d$response[which(d$targ=="present" & d$accuracy==1)] = 1
d$response[which(d$targ=="present" & d$accuracy==0)] = 0
d$response[which(d$targ=="absent" & d$accuracy==1)] = 0
d$response[which(d$targ=="absent" & d$accuracy==0)] = 1
write_csv(d, "../cluster_level3/data_for_model.csv")
library(tidyverse)
library(brms)
# options(mc.cores = 1)
n_chains <- 1
n_iter <- 1000
d <- read_csv("../cluster_level3/data_for_model.csv")  %>%
filter(nD == 15) %>%
mutate(obs = as.factor(obs))
dp <- d %>% group_by(targ, type) %>%
summarise(rt = median(rt),
response = 1, .groups = "drop")
#########################################
#### FULL model
#########################################
formula <- bf(rt | dec(response) ~
# the first part is the linear predictor for drift rate
0 + targ:type,
# bs: boundary separation
bs ~ 0 + type,
# ndt: non-decision time
ndt ~ 1,
# bias: starting bias for TA or TP
bias ~ 0 + type)
prior <- c(
set_prior("normal(0, 1)", class = "b"), # rate intercepts
set_prior("normal(1, 1)", class = "b", dpar = "bs"), #boundary sep
set_prior("normal(0.0, 0.5)", class = "b", dpar = "bias"),
set_prior("normal(-5, 0.5)", class = "Intercept", dpar = "ndt"))
tmp_dat <- make_standata(formula,
family = wiener(link_bs = "log",
link_bias = "logit",
link_ndt = "log"),
data = d, prior = prior,
chains = n_chains)
str(tmp_dat, 1, give.attr = FALSE)
initfun <- function() {
list(
b = c(rnorm(tmp_dat$K/2, 0, 1), rnorm(tmp_dat$K/2, 0, 0.1)),
b_bs = c(runif(tmp_dat$K_bs/2, 0.5, 1), runif(tmp_dat$K_bs/2, 0, 0.1)),
Intercept_ndt = -10,
b_bias = rnorm(tmp_dat$K_bias, 0.0, 0.1),
#sd_1 = runif(tmp_dat$M_1, 0.5, 1),
z_1 = matrix(rnorm(tmp_dat$M_1*tmp_dat$N_1, 0, 0.01),
tmp_dat$M_1, tmp_dat$N_1),
L_1 = diag(tmp_dat$M_1)
)
}
fit_wiener <- brm(formula,
data = dp,
family = wiener(link_bs = "log",
link_bias = "logit",
link_ndt = "log"),
sample_prior = "only",
prior = prior,
inits = initfun,
iter = n_iter,
chains = 1, cores = 1,
control = list(max_treedepth = 15, adapt_delta = 0.9))
initfun <- function() {
list(
b = c(rnorm(tmp_dat$K/2, 0, 1), rnorm(tmp_dat$K/2, 0, 0.1)),
b_bs = c(runif(tmp_dat$K_bs/2, 0.5, 1), runif(tmp_dat$K_bs/2, 0, 0.1)),
Intercept_ndt = -10,
b_bias = rnorm(tmp_dat$K_bias, 0.0, 0.1),
#sd_1 = runif(tmp_dat$M_1, 0.5, 1),
#z_1 = matrix(rnorm(tmp_dat$M_1*tmp_dat$N_1, 0, 0.01),
#              tmp_dat$M_1, tmp_dat$N_1),
#  L_1 = diag(tmp_dat$M_1)
)
}
fit_wiener <- brm(formula,
data = dp,
family = wiener(link_bs = "log",
link_bias = "logit",
link_ndt = "log"),
sample_prior = "only",
prior = prior,
inits = initfun,
iter = n_iter,
chains = 1, cores = 1,
control = list(max_treedepth = 15, adapt_delta = 0.9))
str(tmp_dat, 1, give.attr = FALSE)
c(rnorm(tmp_dat$K/2, 0, 1), rnorm(tmp_dat$K/2, 0, 0.1))
list(
b = c(rnorm(tmp_dat$K/2, 0, 1), rnorm(tmp_dat$K/2, 0, 0.1), 0),
b_bs = c(runif(tmp_dat$K_bs/2, 0.5, 1), runif(tmp_dat$K_bs/2, 0, 0.1)),
Intercept_ndt = -10,
b_bias = rnorm(tmp_dat$K_bias, 0.0, 0.1),
#sd_1 = runif(tmp_dat$M_1, 0.5, 1),
#z_1 = matrix(rnorm(tmp_dat$M_1*tmp_dat$N_1, 0, 0.01),
#              tmp_dat$M_1, tmp_dat$N_1),
#  L_1 = diag(tmp_dat$M_1)
)
initfun <- function() {
list(
b = c(rnorm(tmp_dat$K/2, 0, 1), rnorm(tmp_dat$K/2, 0, 0.1), 0),
b_bs = c(runif(tmp_dat$K_bs/2, 0.5, 1), runif(tmp_dat$K_bs/2, 0, 0.1)),
Intercept_ndt = -10,
b_bias = rnorm(tmp_dat$K_bias, 0.0, 0.1),
#sd_1 = runif(tmp_dat$M_1, 0.5, 1),
#z_1 = matrix(rnorm(tmp_dat$M_1*tmp_dat$N_1, 0, 0.01),
#              tmp_dat$M_1, tmp_dat$N_1),
#  L_1 = diag(tmp_dat$M_1)
)
}
fit_wiener <- brm(formula,
data = dp,
family = wiener(link_bs = "log",
link_bias = "logit",
link_ndt = "log"),
sample_prior = "only",
prior = prior,
inits = initfun,
iter = n_iter,
chains = 1, cores = 1,
control = list(max_treedepth = 15, adapt_delta = 0.9))
tmp_dat <- make_standata(formula,
family = wiener(link_bs = "log",
link_bias = "logit",
link_ndt = "log"),
data = dp, prior = prior,
chains = n_chains)
str(tmp_dat, 1, give.attr = FALSE)
initfun <- function() {
list(
b = c(rnorm(tmp_dat$K/2, 0, 1), rnorm(tmp_dat$K/2, 0, 0.1)),
b_bs = c(runif(tmp_dat$K_bs/2, 0.5, 1), runif(tmp_dat$K_bs/2, 0, 0.1)),
Intercept_ndt = -10,
b_bias = rnorm(tmp_dat$K_bias, 0.0, 0.1),
#sd_1 = runif(tmp_dat$M_1, 0.5, 1),
#z_1 = matrix(rnorm(tmp_dat$M_1*tmp_dat$N_1, 0, 0.01),
#              tmp_dat$M_1, tmp_dat$N_1),
#  L_1 = diag(tmp_dat$M_1)
)
}
fit_wiener <- brm(formula,
data = dp,
family = wiener(link_bs = "log",
link_bias = "logit",
link_ndt = "log"),
sample_prior = "only",
prior = prior,
inits = initfun,
iter = n_iter,
chains = 1, cores = 1,
control = list(max_treedepth = 15, adapt_delta = 0.9))
initfun()
c(rnorm(tmp_dat$K/2, 0, 1), rnorm(tmp_dat$K/2, 0, 0.1))
initfun <- function() {
list(
b = c(rnorm(tmp_dat$K/2, 0, 1), rnorm(tmp_dat$K/2, 0, 0.1)),
b_bs = c(runif(tmp_dat$K_bs/2, 0.5, 1), runif(tmp_dat$K_bs/2, 0, 0.1)),
Intercept_ndt = -10,
b_bias = rnorm(tmp_dat$K_bias, 0.0, 0.1)
#sd_1 = runif(tmp_dat$M_1, 0.5, 1),
#z_1 = matrix(rnorm(tmp_dat$M_1*tmp_dat$N_1, 0, 0.01),
#              tmp_dat$M_1, tmp_dat$N_1),
#  L_1 = diag(tmp_dat$M_1)
)
}
fit_wiener <- brm(formula,
data = dp,
family = wiener(link_bs = "log",
link_bias = "logit",
link_ndt = "log"),
sample_prior = "only",
prior = prior,
inits = initfun,
iter = n_iter,
chains = 1, cores = 1,
control = list(max_treedepth = 15, adapt_delta = 0.9))
saveRDS(fit_wiener, "level3_prior.model")
pred_wiener <- dp %>% add_predicted_draws(fit_wiener, negative_rt = TRUE, ndraws = 1) %>%
ungroup() %>%
select(-.chain, -.draw, -.iteration, -.row) %>%
mutate(rt = if_else(response == 1, rt, -rt)) %>%
pivot_longer(c(rt, .prediction), names_to = "emp_pre", values_to = "rt") %>%
select(-response, -accuracy) %>%
mutate(emp_pre = fct_recode(emp_pre, empirical = "rt", prediction = ".prediction"),
response = if_else(rt < 0, "absent", "present"),
response = as_factor(response),
accuracy = response == targ,
rt = abs(rt))
library(tidybayes)
pred_wiener <- dp %>% add_predicted_draws(fit_wiener, negative_rt = TRUE, ndraws = 1) %>%
ungroup() %>%
select(-.chain, -.draw, -.iteration, -.row) %>%
mutate(rt = if_else(response == 1, rt, -rt)) %>%
pivot_longer(c(rt, .prediction), names_to = "emp_pre", values_to = "rt") %>%
select(-response, -accuracy) %>%
mutate(emp_pre = fct_recode(emp_pre, empirical = "rt", prediction = ".prediction"),
response = if_else(rt < 0, "absent", "present"),
response = as_factor(response),
accuracy = response == targ,
rt = abs(rt))
source('~/GitHub/simpleConjunction/analysis/prior_check.R', echo=TRUE)
pred_wiener <- dp %>% add_predicted_draws(fit_wiener, negative_rt = TRUE, ndraws = 1)
pred_wiener
pred_wiener <- dp %>% add_predicted_draws(fit_wiener, negative_rt = TRUE, ndraws = 1) %>%
ungroup() %>%
select(-.chain, -.draw, -.iteration, -.row) %>%
mutate(rt = if_else(response == 1, rt, -rt))
pred_wiener
pred_wiener <- d %>% add_predicted_draws(fit_wiener, negative_rt = TRUE, ndraws = 1) %>%
ungroup() %>%
select(-.chain, -.draw, -.iteration, -.row) %>%
mutate(rt = if_else(response == 1, rt, -rt)) %>%
pivot_longer(c(rt, .prediction), names_to = "emp_pre", values_to = "rt") %>%
select(-response, -accuracy) %>%
mutate(emp_pre = fct_recode(emp_pre, empirical = "rt", prediction = ".prediction"),
response = if_else(rt < 0, "absent", "present"),
response = as_factor(response),
accuracy = response == targ,
rt = abs(rt))
ggplot(pred_wiener, aes(x = rt, colour = emp_pre)) +
geom_density(alpha = 0.5) +
facet_grid(nD~targ) +
coord_cartesian(xlim = c(0, 2))
pred_wiener <- d %>% add_predicted_draws(fit_wiener, negative_rt = TRUE, ndraws = 10) %>%
ungroup() %>%
select(-.chain, -.draw, -.iteration, -.row) %>%
mutate(rt = if_else(response == 1, rt, -rt)) %>%
pivot_longer(c(rt, .prediction), names_to = "emp_pre", values_to = "rt") %>%
select(-response, -accuracy) %>%
mutate(emp_pre = fct_recode(emp_pre, empirical = "rt", prediction = ".prediction"),
response = if_else(rt < 0, "absent", "present"),
response = as_factor(response),
accuracy = response == targ,
rt = abs(rt))
library(tidyverse)
library(ggthemes)
library(brms)
library(tidybayes)
#library(corrr)
library(patchwork)
options(digits = 2, mc.cores = 10)
knitr::opts_chunk$set(echo = TRUE)
theme_set(theme_bw())
source("plot_ddm_model.R")
ggplot(pred_wiener, aes(x = rt, colour = emp_pre)) +
geom_density(alpha = 0.5) +
facet_grid(nD~targ) +
coord_cartesian(xlim = c(0, 2))
pred_wiene
pred_wiener <- d %>% add_predicted_draws(fit_wiener, negative_rt = TRUE, ndraws = 10)
pred_wiener
